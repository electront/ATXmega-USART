
UART_Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001239  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fd  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000764  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ce  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b2  00000000  00000000  00003256  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 36       	cpi	r26, 0x66	; 102
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Buffer_Esta_Lleno>:
	return buffer->count == 0;
}

// Función para verificar si la cola está llena
bool Buffer_Esta_Lleno(Buffer_s *buffer) {
	return buffer->count == TAMMAX;
  a6:	fc 01       	movw	r30, r24
  a8:	ee 5a       	subi	r30, 0xAE	; 174
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 81       	ld	r25, Z
  b0:	90 35       	cpi	r25, 0x50	; 80
  b2:	09 f0       	breq	.+2      	; 0xb6 <Buffer_Esta_Lleno+0x10>
  b4:	80 e0       	ldi	r24, 0x00	; 0
}
  b6:	08 95       	ret

000000b8 <Buffer_Add>:

// Función para agregar un elemento al final de la cola (renombrada a Buffer_Add)
bool Buffer_Add(Buffer_s *buffer, uint8_t valor) {
  b8:	cf 93       	push	r28
  ba:	9c 01       	movw	r18, r24
  bc:	c6 2f       	mov	r28, r22
	return buffer->count == 0;
}

// Función para verificar si la cola está llena
bool Buffer_Esta_Lleno(Buffer_s *buffer) {
	return buffer->count == TAMMAX;
  be:	fc 01       	movw	r30, r24
  c0:	ee 5a       	subi	r30, 0xAE	; 174
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	40 81       	ld	r20, Z
}

// Función para agregar un elemento al final de la cola (renombrada a Buffer_Add)
bool Buffer_Add(Buffer_s *buffer, uint8_t valor) {
	if (Buffer_Esta_Lleno(buffer)) {
  c6:	40 35       	cpi	r20, 0x50	; 80
  c8:	a1 f0       	breq	.+40     	; 0xf2 <Buffer_Add+0x3a>
		return false;
	}
	buffer->fin = (buffer->fin + 1) % TAMMAX;  // Aseguramos que el índice se ajuste al tamaño del buffer
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	80 81       	ld	r24, Z
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	60 e5       	ldi	r22, 0x50	; 80
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 6d 01 	call	0x2da	; 0x2da <__divmodhi4>
  da:	80 83       	st	Z, r24
	buffer->list[buffer->fin] = valor;
  dc:	f9 01       	movw	r30, r18
  de:	e8 0f       	add	r30, r24
  e0:	f1 1d       	adc	r31, r1
  e2:	c0 83       	st	Z, r28
	buffer->count++;
  e4:	f9 01       	movw	r30, r18
  e6:	ee 5a       	subi	r30, 0xAE	; 174
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	40 83       	st	Z, r20
	return true;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <Buffer_Add+0x3c>
}

// Función para agregar un elemento al final de la cola (renombrada a Buffer_Add)
bool Buffer_Add(Buffer_s *buffer, uint8_t valor) {
	if (Buffer_Esta_Lleno(buffer)) {
		return false;
  f2:	80 e0       	ldi	r24, 0x00	; 0
	}
	buffer->fin = (buffer->fin + 1) % TAMMAX;  // Aseguramos que el índice se ajuste al tamaño del buffer
	buffer->list[buffer->fin] = valor;
	buffer->count++;
	return true;
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <Buffer_Leer>:

// Función para eliminar un elemento del frente de la cola (renombrada a Buffer_Leer)
bool Buffer_Leer(Buffer_s *buffer, uint8_t *valor) {
  f8:	9c 01       	movw	r18, r24
	buffer->count = 0;
}

// Función para verificar si la cola está vacía
bool Buffer_Esta_Vacio(Buffer_s *buffer) {
	return buffer->count == 0;
  fa:	fc 01       	movw	r30, r24
  fc:	ee 5a       	subi	r30, 0xAE	; 174
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
	return true;
}

// Función para eliminar un elemento del frente de la cola (renombrada a Buffer_Leer)
bool Buffer_Leer(Buffer_s *buffer, uint8_t *valor) {
	if (Buffer_Esta_Vacio(buffer)) {
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	b1 f0       	breq	.+44     	; 0x132 <Buffer_Leer+0x3a>
		return false;
	}
	*valor = buffer->list[buffer->ini];
 106:	32 97       	sbiw	r30, 0x02	; 2
 108:	80 81       	ld	r24, Z
 10a:	d9 01       	movw	r26, r18
 10c:	a8 0f       	add	r26, r24
 10e:	b1 1d       	adc	r27, r1
 110:	8c 91       	ld	r24, X
 112:	db 01       	movw	r26, r22
 114:	8c 93       	st	X, r24
	buffer->ini = (buffer->ini + 1) % TAMMAX;  // Ajustamos el índice del inicio
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	60 e5       	ldi	r22, 0x50	; 80
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 6d 01 	call	0x2da	; 0x2da <__divmodhi4>
 124:	80 83       	st	Z, r24
	buffer->count--;
 126:	32 96       	adiw	r30, 0x02	; 2
 128:	80 81       	ld	r24, Z
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	return true;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
}

// Función para eliminar un elemento del frente de la cola (renombrada a Buffer_Leer)
bool Buffer_Leer(Buffer_s *buffer, uint8_t *valor) {
	if (Buffer_Esta_Vacio(buffer)) {
		return false;
 132:	80 e0       	ldi	r24, 0x00	; 0
	}
	*valor = buffer->list[buffer->ini];
	buffer->ini = (buffer->ini + 1) % TAMMAX;  // Ajustamos el índice del inicio
	buffer->count--;
	return true;
}
 134:	08 95       	ret

00000136 <main>:
	//lcd_clear();
	
    /* Replace with your application code */
    while (1)
    {
	Usart_Guardar_Valor_Buffer();
 136:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Usart_Guardar_Valor_Buffer>
 13a:	fd cf       	rjmp	.-6      	; 0x136 <main>

0000013c <__vector_18>:
	Usart_Enviar_Hex(0x02); //Significa que se va a enviar 2 byte, (comando, 1 byte de datos);
	Usart_Enviar_Hex(ERROR_TRAMA); //Envio del comando error.
	Usart_Enviar_Hex(0x00); // Envio 0x00 para rellenar.
	Usart_Enviar_Hex(checksum);	//checksum

	Usart_Reinicio_Trama();
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	cf 93       	push	r28
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 164:	83 e1       	ldi	r24, 0x13	; 19
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <Buffer_Esta_Lleno>
 16c:	88 23       	and	r24, r24
 16e:	29 f0       	breq	.+10     	; 0x17a <__vector_18+0x3e>
 170:	6c 2f       	mov	r22, r28
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 5c 00 	call	0xb8	; 0xb8 <Buffer_Add>
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	cf 91       	pop	r28
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <Usart_Reinicio_Trama>:
 19e:	e2 e0       	ldi	r30, 0x02	; 2
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	17 82       	std	Z+7, r1	; 0x07
 1a4:	10 86       	std	Z+8, r1	; 0x08
 1a6:	11 86       	std	Z+9, r1	; 0x09
 1a8:	12 86       	std	Z+10, r1	; 0x0a
 1aa:	13 86       	std	Z+11, r1	; 0x0b
 1ac:	16 82       	std	Z+6, r1	; 0x06
 1ae:	15 82       	std	Z+5, r1	; 0x05
 1b0:	12 82       	std	Z+2, r1	; 0x02
 1b2:	14 82       	std	Z+4, r1	; 0x04
 1b4:	13 82       	std	Z+3, r1	; 0x03
 1b6:	11 82       	std	Z+1, r1	; 0x01
 1b8:	08 95       	ret

000001ba <Usart_Guardar_Valor_Buffer>:
}




void Usart_Guardar_Valor_Buffer(){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	1f 92       	push	r1
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	static uint16_t comprobar_checksum = 0;
	uint8_t valor_leido; 
	
	Buffer_Leer(&Buffer_Entrada, &valor_leido);
 1c4:	be 01       	movw	r22, r28
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	83 e1       	ldi	r24, 0x13	; 19
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <Buffer_Leer>
	
	if(!Usart_Trama.deteccion_comienzo_trama){
 1d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Usart_Trama+0x7>
 1d6:	81 11       	cpse	r24, r1
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <Usart_Guardar_Valor_Buffer+0x30>
		if( valor_leido == COMIENZO_TRAMA){
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f0       	breq	.+2      	; 0x1e2 <Usart_Guardar_Valor_Buffer+0x28>
 1e0:	78 c0       	rjmp	.+240    	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
			Usart_Trama.deteccion_comienzo_trama = true; // Indico que ya recibi el inicio de la trama.
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Usart_Trama+0x7>
 1e8:	74 c0       	rjmp	.+232    	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
		}
	}
	else{ // Si ya se recibio el inicio de trama continuar con la recepcion.
		if(Usart_Trama.deteccion_tamano_trama == false){
 1ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Usart_Trama+0x8>
 1ee:	81 11       	cpse	r24, r1
 1f0:	11 c0       	rjmp	.+34     	; 0x214 <Usart_Guardar_Valor_Buffer+0x5a>
			Usart_Trama.tamano_trama = valor_leido; //Guardado el tamano de la trama.
 1f2:	29 81       	ldd	r18, Y+1	; 0x01
 1f4:	e2 e0       	ldi	r30, 0x02	; 2
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	20 83       	st	Z, r18
			Usart_Trama.deteccion_tamano_trama = true; // Indico que ya recibi tamano de la trama.
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 87       	std	Z+8, r24	; 0x08
			comprobar_checksum += Usart_Trama.tamano_trama;
 1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 202:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 206:	82 0f       	add	r24, r18
 208:	91 1d       	adc	r25, r1
 20a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 212:	5f c0       	rjmp	.+190    	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
						
						//sprintf(letra, "%d", Usart_Trama.tamano_trama);
						//lcd_gotorc(2,9);
						//lcd_puts(letra);
		}
		else if(Usart_Trama.deteccion_comando_trama == false){
 214:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Usart_Trama+0x9>
 218:	81 11       	cpse	r24, r1
 21a:	14 c0       	rjmp	.+40     	; 0x244 <Usart_Guardar_Valor_Buffer+0x8a>
			Usart_Trama.comando = valor_leido;
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	e2 e0       	ldi	r30, 0x02	; 2
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	21 83       	std	Z+1, r18	; 0x01
			Usart_Trama.tamano_trama--; //Resto '1' pq ya quite el comando de la trama.
 224:	80 81       	ld	r24, Z
 226:	81 50       	subi	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
			Usart_Trama.deteccion_comando_trama = true;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	81 87       	std	Z+9, r24	; 0x09
			comprobar_checksum += Usart_Trama.comando;
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 236:	82 0f       	add	r24, r18
 238:	91 1d       	adc	r25, r1
 23a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	47 c0       	rjmp	.+142    	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
						
						//sprintf(letra, "%d", Usart_Trama.comando);
						//lcd_gotorc(2,9);
						//lcd_puts(letra);
		}
		else if(Usart_Trama.tamano_trama != 0){
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Usart_Trama>
 248:	88 23       	and	r24, r24
 24a:	61 f1       	breq	.+88     	; 0x2a4 <Usart_Guardar_Valor_Buffer+0xea>
			if(Usart_Trama.tamano_trama == 2){
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	99 f4       	brne	.+38     	; 0x276 <Usart_Guardar_Valor_Buffer+0xbc>
				Usart_Trama.dato_2_byte = valor_leido;
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	e2 e0       	ldi	r30, 0x02	; 2
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	94 83       	std	Z+4, r25	; 0x04
 25a:	83 83       	std	Z+3, r24	; 0x03
				Usart_Trama.tamano_trama--; //Resto '1' pq ya quite el byte_2 de la trama.
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	20 83       	st	Z, r18
				comprobar_checksum += Usart_Trama.dato_2_byte;
 260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	2e c0       	rjmp	.+92     	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
			}
			else if(Usart_Trama.tamano_trama == 1){
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	81 f4       	brne	.+32     	; 0x29a <Usart_Guardar_Valor_Buffer+0xe0>
				Usart_Trama.dato_1_byte = valor_leido;
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	e2 e0       	ldi	r30, 0x02	; 2
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	22 83       	std	Z+2, r18	; 0x02
				Usart_Trama.tamano_trama--; //Resto '1' pq ya quite el byte_1 de la trama.
 282:	10 82       	st	Z, r1
				comprobar_checksum += Usart_Trama.dato_1_byte;
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28c:	82 0f       	add	r24, r18
 28e:	91 1d       	adc	r25, r1
 290:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	1c c0       	rjmp	.+56     	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
			}
			else{
				//lcd_gotorc(4,1);
				//lcd_puts("Error trama  ");//Informar que hubo un error en el tamano de la trama(bytes a enviar)
				//Usart_Error_Trama();// Informa que hubo un error en la trama y reinicia el procesamiento con el siguiente trama a procesar.
				comprobar_checksum = 0;
 29a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	17 c0       	rjmp	.+46     	; 0x2d2 <Usart_Guardar_Valor_Buffer+0x118>
			}
		}
		else{
			Usart_Trama.checksum = valor_leido;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Usart_Trama+0x6>
 2ac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Usart_Trama+0x5>
							
			//sprintf(letra, "%d", comprobar_checksum);
			//lcd_gotorc(3,18);
			//lcd_puts(letra);
				
			if(Usart_Trama.checksum == comprobar_checksum){
 2b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <Usart_Guardar_Valor_Buffer+0x10c>
			//	lcd_gotorc(4,1);
			//	lcd_puts("Trama Correcta");
				//Serie_enviar_ascii("sip");
				Usart_Trama.trama_disponible = true;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Usart_Trama+0xb>
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <Usart_Guardar_Valor_Buffer+0x110>

			}
			else{
			//	lcd_gotorc(4,1);
			//	lcd_puts("Error Cheksum ");
				Usart_Reinicio_Trama();
 2c6:	0e 94 cf 00 	call	0x19e	; 0x19e <Usart_Reinicio_Trama>
				//Serie_enviar_ascii(USART_PC, "nop\n");
				//Usart_Error_Trama();
				
			}
			comprobar_checksum = 0;
 2ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 2d2:	0f 90       	pop	r0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <__divmodhi4>:
 2da:	97 fb       	bst	r25, 7
 2dc:	07 2e       	mov	r0, r23
 2de:	16 f4       	brtc	.+4      	; 0x2e4 <__divmodhi4+0xa>
 2e0:	00 94       	com	r0
 2e2:	07 d0       	rcall	.+14     	; 0x2f2 <__divmodhi4_neg1>
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	09 d0       	rcall	.+18     	; 0x2fa <__divmodhi4_neg2>
 2e8:	0e 94 81 01 	call	0x302	; 0x302 <__udivmodhi4>
 2ec:	07 fc       	sbrc	r0, 7
 2ee:	05 d0       	rcall	.+10     	; 0x2fa <__divmodhi4_neg2>
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__divmodhi4_exit>

000002f2 <__divmodhi4_neg1>:
 2f2:	90 95       	com	r25
 2f4:	81 95       	neg	r24
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__divmodhi4_neg2>:
 2fa:	70 95       	com	r23
 2fc:	61 95       	neg	r22
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000300 <__divmodhi4_exit>:
 300:	08 95       	ret

00000302 <__udivmodhi4>:
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	51 e1       	ldi	r21, 0x11	; 17
 308:	07 c0       	rjmp	.+14     	; 0x318 <__udivmodhi4_ep>

0000030a <__udivmodhi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	a6 17       	cp	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	10 f0       	brcs	.+4      	; 0x318 <__udivmodhi4_ep>
 314:	a6 1b       	sub	r26, r22
 316:	b7 0b       	sbc	r27, r23

00000318 <__udivmodhi4_ep>:
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	5a 95       	dec	r21
 31e:	a9 f7       	brne	.-22     	; 0x30a <__udivmodhi4_loop>
 320:	80 95       	com	r24
 322:	90 95       	com	r25
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
